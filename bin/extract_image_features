#!/usr/bin/env python

import os
import os.path as osp
import json
from PIL import Image
import click
from tqdm import tqdm

import torch
from torch.utils.data import DataLoader
from torchvision.datasets import ImageFolder
from transformers import CLIPProcessor, CLIPVisionModel
from euphemism.util import preprocess_path


ROOT = osp.abspath(osp.join(osp.dirname(osp.abspath(__file__)), '..'))
DATA_ROOT = osp.join(ROOT, 'data')


@click.command()
@click.option(
    '--image-dir',
    type=click.Path(exists=True, dir_okay=True),
    default=osp.join(DATA_ROOT, 'images'),
)
@click.option(
    '--save-dir',
    type=click.Path(exists=False, dir_okay=True, writable=True),
    default=osp.join(DATA_ROOT, 'features'),
)
@click.option(
    '--model-name',
    type=str,
    default='openai/clip-vit-large-patch14',
)
@click.option(
    '--batch-size',
    type=int,
    default=16,
)
@click.option(
    '--device',
    type=str,
    default='cuda:0',
)
@click.option(
    '--num-workers',
    type=int,
    default=5,
)
def main(image_dir, save_dir, model_name, batch_size, device, num_workers):
    image_dir = preprocess_path(image_dir)
    save_dir = preprocess_path(save_dir)
    os.makedirs(save_dir)

    model = CLIPVisionModel.from_pretrained(model_name).half().to(device)
    model.eval()
    processor = CLIPProcessor.from_pretrained(model_name)

    dataset = ImageFolder(image_dir, transform=processor.feature_extractor)
    loader = DataLoader(
        dataset=dataset,
        batch_size=batch_size,
        shuffle=False,
        pin_memory=False,
        num_workers=num_workers,
    )

    with torch.no_grad():
        for i, (batch, classes) in enumerate(tqdm(loader)):
            assert torch.prod(classes == i).item() == 1
            term = dataset.classes[i]
            pixel_values = batch['pixel_values'][0].half().to(device)
            output = model(pixel_values=pixel_values)
            features = output.pooler_output.mean(dim=0, keepdim=True).cpu().clone()
            torch.save(
                features,
                osp.join(save_dir, f'{term}.pt'),
            )


if __name__ == "__main__":
    main()